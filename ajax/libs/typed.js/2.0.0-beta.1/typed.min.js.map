{"version":3,"sources":["typed.js"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","_classCallCheck","instance","Constructor","TypeError","Object","defineProperty","value","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","key","protoProps","staticProps","prototype","_initializerJs","_htmlParserJs","Typed","elementId","options","initializer","load","begin","pause","status","start","stop","typingComplete","toggleBlinking","onStop","arrayPos","typewrite","curString","curStrPos","backspace","onStart","reset","onDestroy","restart","arguments","undefined","clearInterval","timeout","replaceText","cursor","parentNode","removeChild","strPos","curLoop","onReset","self","shuffleStringsIfNeeded","insertCursor","bindInputFocusEvents","bindFocusEvents","setTimeout","currentElContent","strings","sequence","startDelay","fadeOut","el","classList","contains","fadeOutClass","remove","humanize","humanizer","typeSpeed","setPauseStatus","pauseTime","substr","charAt","skip","test","exec","parseInt","temporaryPause","onTypingPaused","substring","htmlParser","typeHtmlChars","doneTyping","keepTyping","onTypingResumed","preStringTyped","nextString","onStringTyped","complete","loop","loopCount","backDelay","initFadeOut","backSpeed","backSpaceHtmlChars","smartBackspace","stopNum","onLastStringBackspaced","onComplete","isTyping","isBlinking","cusror","cursorBlinking","style","animationIterationCount","speed","Math","round","random","shuffle","sort","className","fadeOutDelay","str","attr","setAttribute","isInput","contentType","innerHTML","textContent","addEventListener","e","showCursor","document","createElement","cursorChar","insertBefore","nextSibling","_interopRequireDefault","obj","__esModule","default","_defaultsJs","_defaultsJs2","Initializer","getElementById","assign","tagName","toLowerCase","elContent","getAttribute","isPaused","map","s","trim","stringsElement","display","Array","slice","apply","children","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","push","err","getCurrentElContent","defaults","Infinity","HTMLParser","curChar","endTag"],"mappings":"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","file":"typed.min.js","sourcesContent":["/*!\n * \n *   typed.js - A jQuery typing animation script\n *   Author: Matt Boldt <me@mattboldt.com>\n *   Version: v2.0.0\n *   Url: https://github.com/mattboldt/typed.js\n *   License(s): MIT\n * \n */\n(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Typed\"] = factory();\n\telse\n\t\troot[\"Typed\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\t\n\tvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\t\n\tvar _initializerJs = __webpack_require__(1);\n\t\n\tvar _htmlParserJs = __webpack_require__(3);\n\t\n\t/**\n\t * Welcome to Typed.js!\n\t * @param {string} elementId HTML element ID\n\t * @param {object} options options object\n\t * @returns {object} a new Typed object\n\t */\n\t\n\tvar Typed = (function () {\n\t  function Typed(elementId, options) {\n\t    _classCallCheck(this, Typed);\n\t\n\t    // Initialize it up\n\t    _initializerJs.initializer.load(this, options, elementId);\n\t    // All systems go!\n\t    this.begin();\n\t  }\n\t\n\t  /**\n\t   * Toggle start() and stop() of the Typed instance\n\t   * @public\n\t   */\n\t\n\t  _createClass(Typed, [{\n\t    key: 'toggle',\n\t    value: function toggle() {\n\t      this.pause.status ? this.start() : this.stop();\n\t    }\n\t\n\t    /**\n\t     * Stop typing / backspacing and enable cursor blinking\n\t     * @public\n\t     */\n\t  }, {\n\t    key: 'stop',\n\t    value: function stop() {\n\t      if (this.typingComplete) return;\n\t      if (this.pause.status) return;\n\t      this.toggleBlinking(true);\n\t      this.pause.status = true;\n\t      this.options.onStop(this.arrayPos, this);\n\t    }\n\t\n\t    /**\n\t     * Start typing / backspacing after being stopped\n\t     * @public\n\t     */\n\t  }, {\n\t    key: 'start',\n\t    value: function start() {\n\t      if (this.typingComplete) return;\n\t      if (!this.pause.status) return;\n\t      this.pause.status = false;\n\t      if (this.pause.typewrite) {\n\t        this.typewrite(this.pause.curString, this.pause.curStrPos);\n\t      } else {\n\t        this.backspace(this.pause.curString, this.pause.curStrPos);\n\t      }\n\t      this.options.onStart(this.arrayPos, this);\n\t    }\n\t\n\t    /**\n\t     * Destroy this instance of Typed\n\t     * @public\n\t     */\n\t  }, {\n\t    key: 'destroy',\n\t    value: function destroy() {\n\t      this.reset(false);\n\t      this.options.onDestroy(this);\n\t    }\n\t\n\t    /**\n\t     * Reset & begin Typed from the start\n\t     * @public\n\t     */\n\t  }, {\n\t    key: 'reset',\n\t    value: function reset() {\n\t      var restart = arguments.length <= 0 || arguments[0] === undefined ? true : arguments[0];\n\t\n\t      clearInterval(this.timeout);\n\t      this.replaceText('');\n\t      if (this.cursor && this.cursor.parentNode) {\n\t        this.cursor.parentNode.removeChild(this.cursor);\n\t      }\n\t      this.strPos = 0;\n\t      this.arrayPos = 0;\n\t      this.curLoop = 0;\n\t      if (restart) {\n\t        this.options.onReset(this);\n\t        this.begin();\n\t      }\n\t    }\n\t\n\t    /**\n\t     * Begins the typing animation\n\t     * @private\n\t     */\n\t  }, {\n\t    key: 'begin',\n\t    value: function begin() {\n\t      var self = this;\n\t      this.typingComplete = false;\n\t      this.shuffleStringsIfNeeded(self);\n\t      this.insertCursor();\n\t      if (this.bindInputFocusEvents) this.bindFocusEvents();\n\t      self.timeout = setTimeout(function () {\n\t        // Check if there is some text in the element, if yes start by backspacing the default message\n\t        if (!self.currentElContent || self.currentElContent.length === 0) {\n\t          self.typewrite(self.strings[self.sequence[self.arrayPos]], self.strPos);\n\t        } else {\n\t          // Start typing\n\t          self.backspace(self.currentElContent, self.currentElContent.length);\n\t        }\n\t      }, self.startDelay);\n\t    }\n\t\n\t    /**\n\t     * Called for each character typed\n\t     * @param {string} curString the current string in the strings array\n\t     * @param {number} curStrPos the current position in the curString\n\t     * @private\n\t     */\n\t  }, {\n\t    key: 'typewrite',\n\t    value: function typewrite(curString, curStrPos) {\n\t      var self = this;\n\t      if (this.fadeOut && this.el.classList.contains(this.fadeOutClass)) {\n\t        this.el.classList.remove(this.fadeOutClass);\n\t        this.cursor.classList.remove(this.fadeOutClass);\n\t      }\n\t\n\t      var humanize = this.humanizer(this.typeSpeed);\n\t\n\t      if (self.pause.status === true) {\n\t        self.setPauseStatus(curString, curStrPos, true);\n\t        return;\n\t      }\n\t\n\t      // contain typing function in a timeout humanize'd delay\n\t      self.timeout = setTimeout(function () {\n\t        // check for an escape character before a pause value\n\t        // format: \\^\\d+ .. eg: ^1000 .. should be able to print the ^ too using ^^\n\t        // single ^ are removed from string\n\t        var pauseTime = 0;\n\t        var substr = curString.substr(curStrPos);\n\t        if (substr.charAt(0) === '^') {\n\t          var skip = 1; // skip atleast 1\n\t          if (/^\\^\\d+/.test(substr)) {\n\t            substr = /\\d+/.exec(substr)[0];\n\t            skip += substr.length;\n\t            pauseTime = parseInt(substr);\n\t            self.temporaryPause = true;\n\t            self.options.onTypingPaused(self.arrayPos, self);\n\t          }\n\t          self.toggleBlinking(true);\n\t\n\t          // strip out the escape character and pause value so they're not printed\n\t          curString = curString.substring(0, curStrPos) + curString.substring(curStrPos + skip);\n\t        }\n\t\n\t        curStrPos = _htmlParserJs.htmlParser.typeHtmlChars(curString, curStrPos, self);\n\t\n\t        // timeout for any pause after a character\n\t        self.timeout = setTimeout(function () {\n\t          // Accounts for blinking while paused\n\t          self.toggleBlinking(false);\n\t\n\t          // We're done with this sentence!\n\t          if (curStrPos === curString.length) {\n\t            self.doneTyping(curString, curStrPos);\n\t          } else {\n\t            self.keepTyping(curString, curStrPos);\n\t          }\n\t          // end of character pause\n\t          if (self.temporaryPause) {\n\t            self.temporaryPause = false;\n\t            self.options.onTypingResumed(self.arrayPos, self);\n\t          }\n\t        }, pauseTime);\n\t\n\t        // humanized value for typing\n\t      }, humanize);\n\t    }\n\t\n\t    /**\n\t     * Continue to the next string & begin typing\n\t     * @param {string} curString the current string in the strings array\n\t     * @param {number} curStrPos the current position in the curString\n\t     * @private\n\t     */\n\t  }, {\n\t    key: 'keepTyping',\n\t    value: function keepTyping(curString, curStrPos) {\n\t      // call before functions if applicable\n\t      if (curStrPos === 0) {\n\t        this.toggleBlinking(false);\n\t        this.options.preStringTyped(this.arrayPos, this);\n\t      }\n\t      // start typing each new char into existing string\n\t      // curString: arg, this.el.html: original text inside element\n\t      var nextString = curString.substr(0, curStrPos + 1);\n\t      this.replaceText(nextString);\n\t      // add characters one by one\n\t      curStrPos++;\n\t      // loop the function\n\t      this.typewrite(curString, curStrPos);\n\t    }\n\t\n\t    /**\n\t     * We're done typing all strings\n\t     * @param {string} curString the current string in the strings array\n\t     * @param {number} curStrPos the current position in the curString\n\t     * @private\n\t     */\n\t  }, {\n\t    key: 'doneTyping',\n\t    value: function doneTyping(curString, curStrPos) {\n\t      var self = this;\n\t      // fires callback function\n\t      self.options.onStringTyped(self.arrayPos, self);\n\t      self.toggleBlinking(true);\n\t      // is this the final string\n\t      if (self.arrayPos === self.strings.length - 1) {\n\t        // callback that occurs on the last typed string\n\t        self.complete();\n\t        // quit if we wont loop back\n\t        if (self.loop === false || self.curLoop === self.loopCount) {\n\t          return;\n\t        }\n\t      }\n\t      self.timeout = setTimeout(function () {\n\t        self.backspace(curString, curStrPos);\n\t      }, self.backDelay);\n\t    }\n\t\n\t    /**\n\t     * Backspaces 1 character at a time\n\t     * @param {string} curString the current string in the strings array\n\t     * @param {number} curStrPos the current position in the curString\n\t     * @private\n\t     */\n\t  }, {\n\t    key: 'backspace',\n\t    value: function backspace(curString, curStrPos) {\n\t      var self = this;\n\t      if (self.pause.status === true) {\n\t        self.setPauseStatus(curString, curStrPos, true);\n\t        return;\n\t      }\n\t      if (this.fadeOut) return this.initFadeOut();\n\t\n\t      this.toggleBlinking(false);\n\t      var humanize = this.humanizer(this.backSpeed);\n\t\n\t      self.timeout = setTimeout(function () {\n\t        curStrPos = _htmlParserJs.htmlParser.backSpaceHtmlChars(curString, curStrPos, self);\n\t        // replace text with base text + typed characters\n\t        var nextString = curString.substr(0, curStrPos);\n\t        self.replaceText(nextString);\n\t\n\t        // if smartBack is enabled\n\t        if (self.smartBackspace) {\n\t          // the remaining part of the current string is equal of the same part of the new string\n\t          if (nextString === self.strings[self.arrayPos + 1].substr(0, curStrPos)) {\n\t            self.stopNum = curStrPos;\n\t          } else {\n\t            self.stopNum = 0;\n\t          }\n\t        }\n\t\n\t        // if the number (id of character in current string) is\n\t        // less than the stop number, keep going\n\t        if (curStrPos > self.stopNum) {\n\t          // subtract characters one by one\n\t          curStrPos--;\n\t          // loop the function\n\t          self.backspace(curString, curStrPos);\n\t        } else if (curStrPos <= self.stopNum) {\n\t          // if the stop number has been reached, increase\n\t          // array position to next string\n\t          self.arrayPos++;\n\t          // When looping, begin at the beginning after backspace complete\n\t          if (self.arrayPos === self.strings.length) {\n\t            self.arrayPos = 0;\n\t            self.options.onLastStringBackspaced();\n\t            self.shuffleStringsIfNeeded();\n\t            self.begin();\n\t          } else {\n\t            self.typewrite(self.strings[self.sequence[self.arrayPos]], curStrPos);\n\t          }\n\t        }\n\t        // humanized value for typing\n\t      }, humanize);\n\t    }\n\t\n\t    /**\n\t     * Full animation is complete\n\t     * @private\n\t     */\n\t  }, {\n\t    key: 'complete',\n\t    value: function complete() {\n\t      this.options.onComplete(this);\n\t      if (this.loop) {\n\t        this.curLoop++;\n\t      } else {\n\t        this.typingComplete = true;\n\t      }\n\t    }\n\t\n\t    /**\n\t     * Has the typing been stopped\n\t     * @param {string} curString the current string in the strings array\n\t     * @param {number} curStrPos the current position in the curString\n\t     * @param {boolean} isTyping\n\t     * @private\n\t     */\n\t  }, {\n\t    key: 'setPauseStatus',\n\t    value: function setPauseStatus(curString, curStrPos, isTyping) {\n\t      this.pause.typewrite = isTyping;\n\t      this.pause.curString = curString;\n\t      this.pause.curStrPos = curStrPos;\n\t    }\n\t\n\t    /**\n\t     * Toggle the blinking cursor\n\t     * @param {boolean} isBlinking\n\t     * @private\n\t     */\n\t  }, {\n\t    key: 'toggleBlinking',\n\t    value: function toggleBlinking(isBlinking) {\n\t      if (!this.cusror) return;\n\t      // if in paused state, don't toggle blinking a 2nd time\n\t      if (this.pause.status) return;\n\t      if (this.cursorBlinking === isBlinking) return;\n\t      this.cursorBlinking = isBlinking;\n\t      var status = isBlinking ? 'infinite' : 0;\n\t      this.cursor.style.animationIterationCount = status;\n\t    }\n\t\n\t    /**\n\t     * Speed in MS to type\n\t     * @param {number} speed\n\t     * @private\n\t     */\n\t  }, {\n\t    key: 'humanizer',\n\t    value: function humanizer(speed) {\n\t      return Math.round(Math.random() * speed / 2) + speed;\n\t    }\n\t\n\t    /**\n\t     * Shuffle the sequence of the strings array\n\t     * @private\n\t     */\n\t  }, {\n\t    key: 'shuffleStringsIfNeeded',\n\t    value: function shuffleStringsIfNeeded() {\n\t      if (!this.shuffle) return;\n\t      this.sequence = this.sequence.sort(function () {\n\t        return Math.random() - 0.5;\n\t      });\n\t    }\n\t\n\t    /**\n\t     * Adds a CSS class to fade out current string\n\t     * @private\n\t     */\n\t  }, {\n\t    key: 'initFadeOut',\n\t    value: function initFadeOut() {\n\t      var self = this;\n\t      this.el.className += ' ' + this.fadeOutClass;\n\t      this.cursor.className += ' ' + this.fadeOutClass;\n\t      return setTimeout(function () {\n\t        self.arrayPos++;\n\t        self.replaceText('');\n\t\n\t        // Resets current string if end of loop reached\n\t        if (self.strings.length > self.arrayPos) {\n\t          self.typewrite(self.strings[self.sequence[self.arrayPos]], 0);\n\t        } else {\n\t          self.typewrite(self.strings[0], 0);\n\t          self.arrayPos = 0;\n\t        }\n\t      }, self.fadeOutDelay);\n\t    }\n\t\n\t    /**\n\t     * Replaces current text in the HTML element\n\t     * depending on element type\n\t     * @param {string} str\n\t     * @private\n\t     */\n\t  }, {\n\t    key: 'replaceText',\n\t    value: function replaceText(str) {\n\t      if (this.attr) {\n\t        this.el.setAttribute(this.attr, str);\n\t      } else {\n\t        if (this.isInput) {\n\t          this.el.value = str;\n\t        } else if (this.contentType === 'html') {\n\t          this.el.innerHTML = str;\n\t        } else {\n\t          this.el.textContent = str;\n\t        }\n\t      }\n\t    }\n\t\n\t    /**\n\t     * If using input elements, bind focus in order to\n\t     * start and stop the animation\n\t     * @private\n\t     */\n\t  }, {\n\t    key: 'bindFocusEvents',\n\t    value: function bindFocusEvents() {\n\t      if (!this.isInput) return;\n\t      var self = this;\n\t      this.el.addEventListener('focus', function (e) {\n\t        self.stop();\n\t      });\n\t      this.el.addEventListener('blur', function (e) {\n\t        self.start();\n\t      });\n\t    }\n\t\n\t    /**\n\t     * On init, insert the cursor element\n\t     * @private\n\t     */\n\t  }, {\n\t    key: 'insertCursor',\n\t    value: function insertCursor() {\n\t      if (!this.showCursor) return;\n\t      this.cursor = document.createElement('span');\n\t      this.cursor.className = 'typed-cursor';\n\t      this.cursor.innerHTML = this.cursorChar;\n\t      this.el.parentNode && this.el.parentNode.insertBefore(this.cursor, this.el.nextSibling);\n\t    }\n\t  }]);\n\t\n\t  return Typed;\n\t})();\n\t\n\texports['default'] = Typed;\n\tmodule.exports = exports['default'];\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\t\n\tvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\t\n\tvar _defaultsJs = __webpack_require__(2);\n\t\n\tvar _defaultsJs2 = _interopRequireDefault(_defaultsJs);\n\t\n\t/**\n\t * Initialize the Typed object\n\t */\n\t\n\tvar Initializer = (function () {\n\t  function Initializer() {\n\t    _classCallCheck(this, Initializer);\n\t  }\n\t\n\t  _createClass(Initializer, [{\n\t    key: 'load',\n\t\n\t    /**\n\t     * Load up defaults & options on the Typed instance\n\t     * @param {Typed} self instance of Typed\n\t     * @param {object} options options object\n\t     * @param {string} elementId HTML element ID\n\t     * @private\n\t     */\n\t\n\t    value: function load(self, options, elementId) {\n\t      // chosen element to manipulate text\n\t      self.el = document.getElementById(elementId);\n\t\n\t      self.options = {};\n\t      Object.assign(self.options, _defaultsJs2['default'], options);\n\t\n\t      // attribute to type into\n\t      self.isInput = self.el.tagName.toLowerCase() === 'input';\n\t      self.attr = self.options.attr;\n\t      self.bindInputFocusEvents = self.options.bindInputFocusEvents;\n\t\n\t      // show cursor\n\t      self.showCursor = self.isInput ? false : self.options.showCursor;\n\t\n\t      // custom cursor\n\t      self.cursorChar = self.options.cursorChar;\n\t\n\t      // Is the cursor blinking\n\t      self.cursorBlinking = true;\n\t\n\t      // text content of element\n\t      self.elContent = self.attr ? self.el.getAttribute(self.attr) : self.el.textContent;\n\t\n\t      // html or plain text\n\t      self.contentType = self.options.contentType;\n\t\n\t      // typing speed\n\t      self.typeSpeed = self.options.typeSpeed;\n\t\n\t      // add a delay before typing starts\n\t      self.startDelay = self.options.startDelay;\n\t\n\t      // backspacing speed\n\t      self.backSpeed = self.options.backSpeed;\n\t\n\t      // only backspace what doesn't match the previous string\n\t      self.smartBackspace = self.options.smartBackspace;\n\t\n\t      // amount of time to wait before backspacing\n\t      self.backDelay = self.options.backDelay;\n\t\n\t      // Fade out instead of backspace\n\t      self.fadeOut = self.options.fadeOut;\n\t      self.fadeOutClass = self.options.fadeOutClass;\n\t      self.fadeOutDelay = self.options.fadeOutDelay;\n\t\n\t      // variable to check whether typing is currently paused\n\t      self.isPaused = false;\n\t\n\t      // input strings of text\n\t      self.strings = self.options.strings.map(function (s) {\n\t        return s.trim();\n\t      });\n\t\n\t      // div containing strings\n\t      self.stringsElement = document.getElementById(self.options.stringsElement);\n\t\n\t      if (self.stringsElement) {\n\t        self.strings = [];\n\t        self.stringsElement.style.display = 'none';\n\t        var strings = Array.prototype.slice.apply(self.stringsElement.children);\n\t        var _iteratorNormalCompletion = true;\n\t        var _didIteratorError = false;\n\t        var _iteratorError = undefined;\n\t\n\t        try {\n\t          for (var _iterator = strings[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n\t            var s = _step.value;\n\t\n\t            self.strings.push(s.innerHTML.trim());\n\t          }\n\t        } catch (err) {\n\t          _didIteratorError = true;\n\t          _iteratorError = err;\n\t        } finally {\n\t          try {\n\t            if (!_iteratorNormalCompletion && _iterator['return']) {\n\t              _iterator['return']();\n\t            }\n\t          } finally {\n\t            if (_didIteratorError) {\n\t              throw _iteratorError;\n\t            }\n\t          }\n\t        }\n\t      }\n\t\n\t      // character number position of current string\n\t      self.strPos = 0;\n\t\n\t      // current array position\n\t      self.arrayPos = 0;\n\t\n\t      // index of string to stop backspacing on\n\t      self.stopNum = 0;\n\t\n\t      // Looping logic\n\t      self.loop = self.options.loop;\n\t      self.loopCount = self.options.loopCount;\n\t      self.curLoop = 0;\n\t\n\t      // shuffle the strings\n\t      self.shuffle = self.options.shuffle;\n\t      // the order of strings\n\t      self.sequence = [];\n\t\n\t      self.pause = {\n\t        status: false,\n\t        typewrite: true,\n\t        curString: '',\n\t        curStrPos: 0\n\t      };\n\t\n\t      // When the typing is complete (when not looped)\n\t      self.typingComplete = false;\n\t\n\t      // Set the order in which the strings are typed\n\t      for (var i in self.strings) {\n\t        self.sequence[i] = i;\n\t      }\n\t\n\t      // If there is some text in the element\n\t      self.currentElContent = this.getCurrentElContent(self);\n\t    }\n\t  }, {\n\t    key: 'getCurrentElContent',\n\t    value: function getCurrentElContent(self) {\n\t      var elContent = '';\n\t      if (self.attr) {\n\t        elContent = self.el.getAttribute(self.attr);\n\t      } else if (self.isInput) {\n\t        elContent = self.el.value;\n\t      } else if (self.contentType === 'html') {\n\t        elContent = self.el.innerHTML;\n\t      } else {\n\t        elContent = self.el.textContent;\n\t      }\n\t      return elContent;\n\t    }\n\t  }]);\n\t\n\t  return Initializer;\n\t})();\n\t\n\texports['default'] = Initializer;\n\tvar initializer = new Initializer();\n\texports.initializer = initializer;\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports) {\n\n\t/**\n\t * Defaults & options\n\t * @returns {object} Typed defaults & options\n\t * @public\n\t */\n\t\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\tvar defaults = {\n\t  /**\n\t   * @property {array} strings strings to be typed\n\t   * @property {string} stringsElement ID of element containing string children\n\t   */\n\t  strings: ['These are the default values...', 'You know what you should do?', 'Use your own!', 'Have a great day!'],\n\t  stringsElement: null,\n\t\n\t  /**\n\t   * @property {number} typeSpeed type speed in milliseconds\n\t   */\n\t  typeSpeed: 0,\n\t\n\t  /**\n\t   * @property {number} startDelay time before typing starts in milliseconds\n\t   */\n\t  startDelay: 0,\n\t\n\t  /**\n\t   * @property {number} backSpeed backspacing speed in milliseconds\n\t   */\n\t  backSpeed: 0,\n\t\n\t  /**\n\t   * @property {boolean} smartBackspace only backspace what doesn't match the previous string\n\t   */\n\t  smartBackspace: true,\n\t\n\t  /**\n\t   * @property {boolean} shuffle shuffle the strings\n\t   */\n\t  shuffle: false,\n\t\n\t  /**\n\t   * @property {number} backDelay time before backspacing in milliseconds\n\t   */\n\t  backDelay: 500,\n\t\n\t  /**\n\t   * @property {boolean} fadeOut Fade out instead of backspace\n\t   * @property {string} fadeOutClass css class for fade animation\n\t   * @property {boolean} fadeOutDelay Fade out delay in milliseconds\n\t   */\n\t  fadeOut: false,\n\t  fadeOutClass: 'typed-fade-out',\n\t  fadeOutDelay: 500,\n\t\n\t  /**\n\t   * @property {boolean} loop loop strings\n\t   * @property {number} loopCount amount of loops\n\t   */\n\t  loop: false,\n\t  loopCount: Infinity,\n\t\n\t  /**\n\t   * @property {boolean} showCursor show cursor\n\t   * @property {string} cursorChar character for cursor\n\t   */\n\t  showCursor: true,\n\t  cursorChar: '|',\n\t\n\t  /**\n\t   * @property {string} attr attribute for typing\n\t   * Ex: input placeholder, value, or just HTML text\n\t   */\n\t  attr: null,\n\t\n\t  /**\n\t   * @property {boolean} bindInputFocusEvents bind to focus and blur if el is text input\n\t   */\n\t  bindInputFocusEvents: false,\n\t\n\t  /**\n\t   * @property {string} contentType 'html' or 'null' for plaintext\n\t   */\n\t  contentType: 'html',\n\t\n\t  /**\n\t   * All typing is complete\n\t   * @param {Typed} self\n\t   */\n\t  onComplete: function onComplete(self) {},\n\t\n\t  /**\n\t   * Before each string is typed\n\t   * @param {number} arrayPos\n\t   * @param {Typed} self\n\t   */\n\t  preStringTyped: function preStringTyped(arrayPos, self) {},\n\t\n\t  /**\n\t   * After each string is typed\n\t   * @param {number} arrayPos\n\t   * @param {Typed} self\n\t   */\n\t  onStringTyped: function onStringTyped(arrayPos, self) {},\n\t\n\t  /**\n\t   * During looping, after last string is typed\n\t   * @param {Typed} self\n\t   */\n\t  onLastStringBackspaced: function onLastStringBackspaced(self) {},\n\t\n\t  /**\n\t   * Typing has been stopped\n\t   * @param {number} arrayPos\n\t   * @param {Typed} self\n\t   */\n\t  onTypingPaused: function onTypingPaused(arrayPos, self) {},\n\t\n\t  /**\n\t   * Typing has been started after being stopped\n\t   * @param {number} arrayPos\n\t   * @param {Typed} self\n\t   */\n\t  onTypingResumed: function onTypingResumed(arrayPos, self) {},\n\t\n\t  /**\n\t   * After reset\n\t   * @param {Typed} self\n\t   */\n\t  onReset: function onReset(self) {},\n\t\n\t  /**\n\t   * After stop\n\t   * @param {number} arrayPos\n\t   * @param {Typed} self\n\t   */\n\t  onStop: function onStop(arrayPos, self) {},\n\t\n\t  /**\n\t   * After start\n\t   * @param {number} arrayPos\n\t   * @param {Typed} self\n\t   */\n\t  onStart: function onStart(arrayPos, self) {},\n\t\n\t  /**\n\t   * After destroy\n\t   * @param {Typed} self\n\t   */\n\t  onDestroy: function onDestroy(self) {}\n\t};\n\t\n\texports['default'] = defaults;\n\tmodule.exports = exports['default'];\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports) {\n\n\t\n\t/**\n\t * TODO: These methods can probably be combined somehow\n\t * Parse HTML tags & HTML Characters\n\t */\n\t\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\t\n\tvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\t\n\tvar HTMLParser = (function () {\n\t  function HTMLParser() {\n\t    _classCallCheck(this, HTMLParser);\n\t  }\n\t\n\t  _createClass(HTMLParser, [{\n\t    key: 'typeHtmlChars',\n\t\n\t    /**\n\t     * Type HTML tags & HTML Characters\n\t     * @param {string} curString Current string\n\t     * @param {number} curStrPos Position in current string\n\t     * @param {Typed} self instance of Typed\n\t     * @returns {number} a new string position\n\t     * @private\n\t     */\n\t\n\t    value: function typeHtmlChars(curString, curStrPos, self) {\n\t      if (self.contentType !== 'html') return curStrPos;\n\t      var curChar = curString.substr(curStrPos).charAt(0);\n\t      if (curChar === '<' || curChar === '&') {\n\t        var endTag = '';\n\t        if (curChar === '<') {\n\t          endTag = '>';\n\t        } else {\n\t          endTag = ';';\n\t        }\n\t        while (curString.substr(curStrPos + 1).charAt(0) !== endTag) {\n\t          curStrPos++;\n\t          if (curStrPos + 1 > curString.length) {\n\t            break;\n\t          }\n\t        }\n\t        curStrPos++;\n\t      }\n\t      return curStrPos;\n\t    }\n\t\n\t    /**\n\t     * Backspace HTML tags and HTML Characters\n\t     * @param {string} curString Current string\n\t     * @param {number} curStrPos Position in current string\n\t     * @param {Typed} self instance of Typed\n\t     * @returns {number} a new string position\n\t     * @private\n\t     */\n\t  }, {\n\t    key: 'backSpaceHtmlChars',\n\t    value: function backSpaceHtmlChars(curString, curStrPos, self) {\n\t      if (self.contentType !== 'html') return curStrPos;\n\t      var curChar = curString.substr(curStrPos).charAt(0);\n\t      if (curChar === '>' || curChar === ';') {\n\t        var endTag = '';\n\t        if (curChar === '>') {\n\t          endTag = '<';\n\t        } else {\n\t          endTag = '&';\n\t        }\n\t        while (curString.substr(curStrPos - 1).charAt(0) !== endTag) {\n\t          curStrPos--;\n\t          if (curStrPos < 0) {\n\t            break;\n\t          }\n\t        }\n\t        curStrPos--;\n\t      }\n\t      return curStrPos;\n\t    }\n\t  }]);\n\t\n\t  return HTMLParser;\n\t})();\n\t\n\texports['default'] = HTMLParser;\n\tvar htmlParser = new HTMLParser();\n\texports.htmlParser = htmlParser;\n\n/***/ })\n/******/ ])\n});\n;"]}